
package umldc.GUI;

import umldc.data.ClassObject;
import umldc.data.CMethod;
import umldc.data.Parameter;
import umldc.data.VisibilityType;
import umldc.data.IMethodObserver;
import umldc.data.AllTypes;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;
import static javax.lang.model.SourceVersion.isName;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author rayha
 */
public class AddMethodDialog extends MyJDialog implements IMethodObserver{
    
     // Created by NetBeans GUI Builder                    
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JCheckBox cbArray;
    private javax.swing.JCheckBox cbRO;
    private javax.swing.JCheckBox cbStatic;
    private javax.swing.JComboBox<String> comboType;
    private javax.swing.JComboBox<String> comboVisibility;
    private javax.swing.JTextField fieldObName;
    private javax.swing.JTextField fieldMethName;

    /**
     *
     */
    protected javax.swing.JList<String> paramListView;
    private javax.swing.JScrollPane sPParamList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel labelParam;
    private javax.swing.JScrollPane sPComments;
    private javax.swing.JTextArea taComments;
    private javax.swing.JButton buttonAddParam;
    private javax.swing.JButton buttonEditParam;
    private javax.swing.JButton buttonRemParam;
    

    private ArrayList<String> imports = new ArrayList<String>();
    private boolean ignoreImports = false;
    private String readOnly = "";
    private String staticVar = "";
    private CMethod meth;
    private int selectedParamIndex;

    /**
     *
     */
    protected DefaultListModel paramListModel = new DefaultListModel();
    private ArrayList<Parameter> paramsToAdd = new ArrayList<Parameter>();
    
    /**
     *
     * @param parent parent that ran this dialog
     * @param modal true or false if this dialog is modal
     * @param cOb the class object which should contain the method
     */
    public AddMethodDialog(Frame parent, boolean modal, ClassObject cOb) {
        super(parent, modal, cOb);
        classOb = cOb;
        this.meth =new CMethod();
        this.meth.registerObserver(this);
        paramListView.setModel(paramListModel);
        System.out.println(meth.getObservers());
        
    }
    
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code"> 
    //Generated by Netbeans GUI Editor
    @Override
    public void initComponents() {
        //java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        labelParam = new javax.swing.JLabel();
        fieldMethName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbRO = new javax.swing.JCheckBox();
        buttonSubmit = new javax.swing.JButton();
        sPComments = new javax.swing.JScrollPane();
        taComments = new javax.swing.JTextArea();
        paramListView = new javax.swing.JList<>();
        sPParamList = new javax.swing.JScrollPane();
        cbStatic = new javax.swing.JCheckBox();
        cbArray = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox<>();
        fieldObName = new javax.swing.JTextField();
        comboVisibility = new javax.swing.JComboBox<>();
        buttonAddParam = new javax.swing.JButton();
        buttonEditParam = new javax.swing.JButton();
        buttonRemParam = new javax.swing.JButton();

        
        setTitle("Add Method");
        

        jLabel1.setText("Method Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Visibility: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel2, gridBagConstraints);

        labelParam.setText("Parameters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        getContentPane().add(labelParam, gridBagConstraints);
        
        paramListView.setModel(new DefaultListModel());
        paramListView.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        paramListView.setMaximumSize(new java.awt.Dimension(46, 500));
        paramListView.setVisibleRowCount(4);
        sPParamList.setViewportView(paramListView);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(sPParamList, gridBagConstraints);
        
        jLabel7.setText("Parameters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        getContentPane().add(jLabel7, gridBagConstraints);
        
        buttonAddParam.setText("Add Parameter");
        buttonAddParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddParamActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(buttonAddParam, gridBagConstraints);
        
        buttonEditParam.setText("Edit");
        buttonEditParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditParamActionPerformed(evt);
            }

            
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        getContentPane().add(buttonEditParam, gridBagConstraints);
        
        buttonRemParam.setText("Remove");
        buttonRemParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemParamActionPerformed(evt);
            }

            

            
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(buttonRemParam, gridBagConstraints);
        

        jLabel5.setText("Additional Comments: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        getContentPane().add(jLabel5, gridBagConstraints);

        fieldMethName.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(fieldMethName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel6, gridBagConstraints);

        buttonSubmit.setText("Submit");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(buttonSubmit, gridBagConstraints);

        taComments.setColumns(20);
        taComments.setRows(5);
        sPComments.setViewportView(taComments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(sPComments, gridBagConstraints);


        jLabel4.setText("Return Type: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel4, gridBagConstraints);
        
        cbStatic.setText("Static");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cbStatic, gridBagConstraints);
        
        jLabel3.setText("Object Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel3, gridBagConstraints);
        
        this.fieldObName.setEditable(false);
        fieldObName.setToolTipText("Object name");
        fieldObName.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(fieldObName, gridBagConstraints);
        

        comboType.setModel(new DefaultComboBoxModel(AllTypes.values()));
        comboType.setPreferredSize(null);
        comboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(comboType, gridBagConstraints);

        comboVisibility.setModel(new DefaultComboBoxModel(VisibilityType.values()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(comboVisibility, gridBagConstraints);

        this.addWindowListener(new WindowAdapter() {
            
            public void windowClosing(WindowEvent e) {
                meth.removeObserver((AddMethodDialog)e.getWindow());
                
                
            }
        });
    }// </editor-fold>
    

    //@Override

    /**
     *
     * @param evt
     */
    public void buttonSubmitActionPerformed(ActionEvent evt) {
        VisibilityType visType = (VisibilityType)getComboVisibility().getSelectedItem();
        boolean isStatic = getCbStatic().isSelected();
        String methName = "";
        String methType = "";
        
        String comms =  generateComments();
        
        //check if fieldObName is same as any import
        if (isValidObName(getComboType(), getFieldObName()) && isName(getFieldMethName().getText())){
            AllTypes methTypeSelected = (AllTypes)getComboType().getSelectedItem();
            
            methName = getFieldMethName().getText();
            if(methTypeSelected.equals(AllTypes.OBJECT)){
                methType = getFieldObName().getText().replaceAll(" ", "");
                
            } else {
                methType = methTypeSelected.getString();
            }
                
                meth.setName(methName);
                
                meth.setType(methType);
                meth.setIsStatic(isStatic);
                meth.setComments(comms);
                meth.setVisibility(visType);
                System.out.println(meth);
            if (!classOb.methodExists(meth)) {
                classOb.addMethod(meth);
                System.out.println("METHOD PARAMETERS after method submission");
                System.out.println(meth.getParameters());
                
                dispose();
            }

        } else {
            JOptionPane.showMessageDialog(this,
                    "Invalid method name or type",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
            

        }
    }
    
    private void comboRTypeActionPerformed(java.awt.event.ActionEvent evt) {                                          
       
        AllTypes selectedType = (AllTypes)comboType.getSelectedItem();
        
        if (selectedType.equals(AllTypes.OBJECT)){
            fieldObName.setEditable(true);
        } else {
            fieldObName.setEditable(false);
        }
    }

    /**
     *
     * @param evt
     */
    protected void buttonAddParamActionPerformed(ActionEvent evt) {
        MyJDialog addParamDialog = new AddParamDialog(null, true,meth);
        addParamDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        addParamDialog.setLocationRelativeTo(this);
        addParamDialog.pack();
        addParamDialog.setVisible(true);
        System.out.println("AddParamActionPerformed");
        System.out.println(meth.getParameters());
    }

    /**
     *
     * @param evt
     */
    protected void buttonEditParamActionPerformed(ActionEvent evt) {
        
        System.out.println("METHOD PARAMETERS EditParamActionPerformed");
        System.out.println(meth.getParameters());
      
        if ( !meth.getParameters().isEmpty() && !paramListView.isSelectionEmpty()) {
            
            selectedParamIndex = paramListView.getSelectedIndex();
            MyJDialog editParamDialog = new EditParamDialog(null, true,meth, selectedParamIndex);
            editParamDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            editParamDialog.setLocationRelativeTo(this);
            editParamDialog.pack();
            editParamDialog.setVisible(true);
        }
    }                                              

    /**
     *
     * @param evt
     */
    protected void buttonRemParamActionPerformed(ActionEvent evt) {
        selectedParamIndex = paramListView.getSelectedIndex();
        meth.removeParam(selectedParamIndex);
    }

    /**
     *
     * @return the JComboBox called comboType
     */
    public JComboBox<String> getComboType() {
        return comboType;
    }

    /**
     *
     * @return the JComboBox called comboVisibility
     */
    public JComboBox<String> getComboVisibility() {
        return comboVisibility;
    }

    /**
     *
     * @return the JTextField called fieldMethName
     */
    public JTextField getFieldMethName() {
        return fieldMethName;
    }

    /**
     *
     * @return JTextField called fieldObName
     */
    public JTextField getFieldObName() {
        return fieldObName;
    }
    
    /**
     *
     * @return JCheckBox called cbStatic
     */
    public JCheckBox getCbStatic() {
        return cbStatic;
    }

    /**
     *
     * @return JList called ParamListView
     */
    public JList<String> getParamListView() {
        return paramListView;
    }

    /**
     *
     * @return JTextArea called taComments
     */
    public JTextArea getTaComments() {
        return taComments;
    }


    //@Override

    /**
     *
     * @return currently no implementation
     */
    public String generateComments() {
       return "";
    }

    /**
     *
     * @param meth the method that should be updated
     */
    @Override
    public void update(CMethod meth) {
        this.meth = meth;
        
        paramListModel.clear();
        CopyOnWriteArrayList<Parameter> parameters= this.meth.getParameters();
        
        if (!parameters.isEmpty()) {
            for (Parameter param : parameters) {
                paramListModel.addElement(param);
            }
        }
        System.out.println(this.meth.getParameters());
        paramListView.setModel(paramListModel);
    }

    
}
